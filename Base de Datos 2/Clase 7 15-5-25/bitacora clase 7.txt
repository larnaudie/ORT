/* BITACORA CLASE07 Grupo N3C Lunes 15/05/2025  */
USE Northwind
go
set dateformat dmy
--Tema de Clase:	T-SQL, PROCEDIMIENTOS y FUNCIONES
declare @Fecha date
set @Fecha = '12/05/2025'
PRINT @Fecha


set dateformat mdy --dmy
--declare @Fecha date
set @Fecha = '12/05/2025'
PRINT @Fecha

PRINT @Fecha
print   Host_name()
print System_User   -- Login al SQLServer
print User_name()

USE NORTHWIND
go
set dateformat dmy

--/*
--declaracion de variable
DECLARE   @nombrevariable nvarchar(100)
DECLARE   @contador int
--  Asignar Valores
SET  @contador  =  1
SET @nombrevariable = 'Jorge' 
--
--Asignar valor con el comando SELECT
DECLARE   @contador int
--SELECT @contador = 1
SET  @contador  =  101
Print 'Valor:'+CONVERT(Nvarchar(10),@contador )

--Tipos de Datos
-- Numericos
/*  Numericos
 Bit   1 , 0
 TinyInt   0  a 255 
 SmallInt -32768  a 32767
 Int    2**31-1
 Decimal (P,s)  P = la cantidad de digitos y s representa los decimal
 Money -2**63   a (2**63)-1
 FLoat 
 Real 
-- Caracteres
CHAR (n)   :  almacenan caracteres ASCII 
NCHAR (n)  :  caracteres en UNICODE   (soportar multiples lenguajes)
Varchar(n):  ocupan largo variable 
Nvarchar(n)

--Fecha  (segun el DATEFORMAT)
Date:       aaaa-mm-dd  
DateTime:   precision a nivel de milisegundos
smallDatetime :precision a nivel de minuto

--Binarios
Binary: (largo fijo hasta 8000 bytes)
varBinary (largo Variable hasta 8000 bytes)
varBinary(MAX)  Largo variable maximo: (2**31)-1


*/
--DECLARE   @variabe TipodeDatos
--Asignar valor con el comando SELECT
select * from Customers
declare @NombreCli nvarchar(100)
select @NombreCli = companyname  From Customers where CustomerID = 'ANTON'
print @NombreCli



-- con SET y una SUBCONSULTA
declare @NombreCli nvarchar(100)
SET @NombreCli = (SELECT companyname  From Customers where CustomerID = 'ANTON' )
print @NombreCli




-- Ejemplo IF
declare @City nvarchar(50) 
set @City= 'MVD'

if @City = 'MVD'
	BEGIN  -- Bloke del VERDADERO
		Print 'Montevideo'
	END
else
	Begin  --Bloke del FALSO
		print 'Otra Ciudad'
	end
Print @City
--


--Ejemplo
select * from Region
-- Si existe la regionID = 6   Actualizamos el campo de la tabla Regiondescription
-- Si no existe el RegionID lo Creamos (INSERT)

-- Script  T-SQL
Go
Declare @codRegion int, @descripcion nchar (50)
set @codRegion = 6
set @descripcion = 'Interior'
IF EXISTS ( SELECT * FROM Region WHERE RegionID = @codRegion )
	Begin -- Actualizar
		UPDATE Region SET RegionDescription = @descripcion WHERE RegionID = @codRegion	
		print 'Se actualizo el RegionID: '+ CONVERT(varchar(5),@codRegion )
	end
ELSE
	Begin
		Print 'No existe la RegionID: '+ CONVERT(varchar(5),@codRegion )
		INSERT INTO Region (RegionID,RegionDescription)  VALUES (@codRegion,'xxxxxxxx' )
		--respetando el orden en la estructura de la tabla
		--INSERT INTO Region  VALUES (@codRegion,@descripcion )
	End
select * from Region
--  


-- Ejemplo del CASE  en un comando SELECT

SELECT OrderID,Quantity from OrderDetails

SELECT OrderID, Quantity,
	CASE
		WHEN Quantity > 10  THEN 'Cantidad Mayor a 10'
		WHEN Quantity = 10  THEN 'Cantidad es 10'
		WHEN Quantity < 10  THEN 'Cantidad menor a 10'
		ELSE  'Cantidad es Otra Cosa'
	END  as DescripcionCantidad
FROM  OrderDetails
--
SELECT OrderID,Sum(Quantity) as TotalCantidadesPorOrden 
   from OrderDetails
        Group By OrderID

SELECT OrderID, Sum(Quantity) as TotalCantidadesPorOrden,
	CASE
		WHEN Sum(Quantity) > 30  THEN 'Cantidad Mayor a 30'
		WHEN Sum(Quantity) = 20  THEN 'Cantidad es 20'
		WHEN Sum(Quantity) < 10  THEN 'Cantidad menor a 10'
		ELSE  'Cantidad es Menor de 30'
	END  as DescripcionCantidad
FROM  OrderDetails
GROUP BY  OrderID
--  Sobre Agregaciones de una Expresion
SELECT OrderID, Sum(Quantity *Unitprice * (1- Discount)) as MontoOrden,
	CASE
		WHEN Sum(Quantity *Unitprice* (1- Discount)) > 1000  THEN 'Alto'
		WHEN Sum(Quantity *Unitprice*(1- Discount)) BETWEEN 500 and 1000  THEN 'Medio'
		WHEN Sum(Quantity *Unitprice*(1- Discount)) < 500  THEN 'Bajo'
		ELSE  'No Importa'
	END  as DescripcionCantidad
FROM  OrderDetails
GROUP BY  OrderID

--
--otro ejemplo con Variables
DECLARE @Quantity smallint
set @Quantity = 50
Print CASE
		WHEN @Quantity > 30  THEN 'Cantidad Mayor a 30'
		WHEN @Quantity = 30  THEN 'Cantidad es 30'
		ELSE  'Cantidad es Menor de 30'
	  END

-- USO del WHILE
declare @contador smallint 
set @contador = 1
WHILE @contador <= 10
	BEGIN
		Print 'El valor del Contador es: '+ CONVERT (nchar(3),@contador)
		SET @contador = @contador + 1
	END
PRINT 'fIN DEL sCRIPT'


-- 
-- TRY - CATCH   ATRAPAR ERRORES Y GESTIONARLOS
BEGIN TRY
	-- eL BLOQUE DE CODIGO A EJECUTAR
	DECLARE  @dividendo tinyint, @divisor tinyint, @resultado tinyint
	Set @dividendo = 255
	set @divisor  = 0
	SET @resultado = @dividendo / @divisor -- aqui se va a producir el error
	Print 'No Hay Error, todo OK: Resultado = '+ CONVERT (nchar(3), @resultado)
	print @resultado
	--Print 'Sin COntrol de errores'
END TRY
BEGIN CATCH 
	-- Si se produjo un error , se ejecutara este bloque de codigo
	Print 'Se produjo un error en la Operacion:'
	--print @@ERROR
	print  ERROR_MESSAGE()
END CATCH
Print 'Final del Script'

--Pasamos al Practico 4
-- PROCEDIMIENTOS ALMACENADOS
/*
 1. Implementar un procedimiento que reciba n parámetros (a ser definidos por el
 alumno) e inserte un registro en la tabla Shippers si dicho Shipper no existe, si existe
 que modifique sus datos con los nuevos datos enviados, 
 2da. Parte:
 luego modifique dicho procedimiento de tal manera que retorne como parámetro de salida 
 el código  asignado a los nuevos shippers (puede utilizar @@IDENTITY  y SCOPE_IDENTITY()  )

 2. Realizar un procedimiento que le baje un x% (recibido como parámetro) el precio
 unitario a los 10 productos menos pedidos de un año dado.
 */
 -- Practico4-EJ1:
 go
 --Parte 1 del EJ1
 CREATE PROCEDURE P4_SP_1a  @id int, @nombreShipper  nvarchar(40)
 AS
-- Cuerpo del Procedimiento
BEGIN
	-- Verificar si existe el Shippers para el ID indicado
	IF  EXISTS (select  * from Shippers where ShipperID = @id )
		BEGIN -- Bloke de Verdadero
		--si existe que modifique sus datos con los nuevos datos enviados
		UPDATE Shippers SET CompanyName = @nombreShipper 
		       where ShipperID = @id
		END
	ELSE
		BEGIN  -- Bloke del Falso
		--inserte un registro en la tabla Shippers si dicho Shipper no existe
			INSERT INTO Shippers (CompanyName) VALUES (@nombreShipper)
		END
END
GO
--  Fin del Procedimiento

Select * from Shippers
EXEC P4_SP_1 30, 'ORT TRANSPORTS S.A.'    --  1aVez Se hizo el INSERT INTO dentro
Select * from Shippers

GO
--Parte 2:
 ALTER PROCEDURE P4_SP_1a  @id int OUTPUT, @nombreShipper  nvarchar(40)
 AS
-- Cuerpo del Procedimiento
BEGIN
	-- Verificar si existe el Shippers para el ID indicado
	IF  EXISTS (select  * from Shippers where ShipperID = @id )
		BEGIN -- Bloke de Verdadero
		--si existe que modifique sus datos con los nuevos datos enviados
		UPDATE Shippers SET CompanyName = @nombreShipper 
		       where ShipperID = @id
		END
	ELSE
		BEGIN  -- Bloke del Falso
		--inserte un registro en la tabla Shippers si dicho Shipper no existe
			INSERT INTO Shippers (CompanyName) VALUES (@nombreShipper)
			SET @id = @@IDENTITY  -- Valor del Ultimo Autoincremental asignado
			Print 'Id Shipper  Insertado: ' + convert(nchar(5), @id)
		END
END
GO
--  Fin del Procedimiento

-- Script de LLamada
declare @codigo int,  @nombre nvarchar(40)
set @nombre = 'ORT2 TRANSPORTES LTDA'
set @codigo = 0  
EXEC P4_SP_1  @codigo OUTPUT , @nombre
print  'El Nuevo Shipper '+@nombre+ ', es: '+ CONVERT ( nvarchar(5),@codigo)
Select * from Shippers

-- parte 2 a
set @nombre = 'ORT2 TRANSPORTES S.A.'
---set @codigo = 0  
EXEC P4_SP_1  @codigo OUTPUT , @nombre
print  'El Nuevo Shipper '+@nombre+ ', es: '+ CONVERT ( nvarchar(5),@codigo)
Select * from Shippers

GO
--Parte 3:  Cargarle y devolver el telefono si existe.
 ALTER PROCEDURE P4_SP_1a  @id int OUTPUT, 
                           @nombreShipper  nvarchar(40),
                           @NuevoID  int OUTPUT, 
						   @telefono nvarchar(24) OUTPUT
 AS
-- Cuerpo del Procedimiento
BEGIN
	-- Verificar si existe el Shippers para el ID indicado
	IF  EXISTS (select  * from Shippers where ShipperID = @id )
		BEGIN -- Bloke de Verdadero
		--si existe que modifique sus datos con los nuevos datos enviados
		UPDATE Shippers SET CompanyName = @nombreShipper,
		                    Phone = @telefono
		       where ShipperID = @id
		END
	ELSE
		BEGIN  -- Bloke del Falso
		--inserte un registro en la tabla Shippers si dicho Shipper no existe
			INSERT INTO Shippers (CompanyName,Phone) VALUES (@nombreShipper,@telefono)
			SET @id = @@IDENTITY  -- Valor del Ultimo Autoincremental asignado de las profundidades
			SET @NuevoID = SCOPE_IDENTITY() -- Valor del Ultimo Autoincremental asignado en este Batch
			Print 'Id Shipper  Insertado: ' + convert(nchar(5), @id)
		END
END
GO
--  Fin del Procedimiento 


-- parte 3
-- Script de LLamada
declare @codigo int,  @nombre nvarchar(40),@Tel nvarchar(24),@newID int
set @nombre = 'ORT4 TRANSPORTES LTDA'
set @codigo = 0 
set @newID = 0
Set @tel = 'www.xxxxxx'

select * from Shippers

EXEC P4_SP_1a @codigo OUTPUT,@nombre,@newID OUTPUT,@tel  OUTPUT

print  'El Nuevo Shipper '+@nombre+ ', es: '+ CONVERT ( nvarchar(5),@newID) 
print  'Telefono es: ' +CONVERT ( nvarchar(24),@tel) 
Select * from Shippers


--INSERT INTO Shippers  Values ('TEST',null,null)
--print Scope_identity()
--Print @@identity 


-- FUNCIONES
/*
 1. Crear una función que reciba como parámetro un código de producto y retorne el
 valor de inventario de dicho producto de acuerdo a su precio unitario y a su cantidad
 2. Crear una función que para un rango de fechas dado y un cliente, retorne el mayor
 importe total de las órdenes para dicho cliente y rango de fechas.
 */

 /* 
 1. Crear una función que reciba como parámetro un código de producto y retorne el
 valor de inventario de dicho producto de acuerdo a su precio unitario y a su cantidad
 */
 GO
 CREATE FUNCTION  P4_E1_FN1 (@codprod int)
 RETURNS  DECIMAL (12,2)
 AS 
 BEGIN 
	declare @ValorInventario DECIMAL (12,2)
	set @ValorInventario = 0.0
	--
	SELECT @ValorInventario = UnitsInStock * UnitPrice
		FROM Products
		WHERE ProductID = @codprod
	--
	RETURN (@ValorInventario)
 END
 GO

 -- Invocamos la Funcion
 -- Script 
 select * from Products

 declare @cod int, @valorStk decimal (12,2)
 set @cod= 1
 Set @valorStk = dbo.P4_E1_FN1 (@cod)
 print 'El Valor del Stock del Producto: '+ convert (nvarchar(5), @cod) +' es : '+
       Convert (nvarchar(16), @valorStk )
GO

--  Otra forma de invocar la funcion
 declare @cod int
 set @cod= 1

 print 'El Valor del Stock del Producto: '+ convert (nvarchar(5), @cod) +' es : '+
       Convert (nvarchar(16),  dbo.P4_E1_FN1 (@cod) )
GO
--