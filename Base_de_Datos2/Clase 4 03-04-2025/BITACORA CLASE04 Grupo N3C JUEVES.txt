/* BITACORA CLASE04 Grupo N3C JUEVES 03/04/2025  */
USE Northwind
go
set dateformat dmy

/*
Practico 3 Parte2   (AGREGACIONES , HAVING y SUBCONSULTAS)


22. Mostrar los nombres de los productos cuya cantidad de órdenes es mayor a 50 
23. Mostrar los datos de los productos cuyo mayor descuento aplicado supera el 0.20 
24. Mostrar nombre de cliente y contacto para todos los clientes que hicieron más de 8 pedidos en el
año 1998 
25. Mostrar nombre de cliente, contacto y país para todos los clientes que tienen un promedio de
cantidad ordenada mayor a 30 en el segundo semestre de 1997 
26. Obtener todos los datos de los empleados que prepararon las órdenes en la fecha más reciente 
27. Mostrar los datos de las categorías que no están en ninguna orden 
28. Mostrar el nombre de las empresas que tienen órdenes destino Brazil que tengan productos con
un promedio de descuento superior al promedio de los descuentos de todas las órdenes 
29. Mostrar los nombres de todos los empleados, su cantidad de ordenes realizadas en los 
10 primeros días de julio de 1997 y la fecha de la última orden realizada en los primeros 10 días de julio
de 1997. En caso que el empleado no preparara ninguna orden en dicha fecha, igual deben mostrarse sus
datos 
30. Mostrar los datos de los clientes que tengan órdenes con más de 2 productos y que no tengan más
de 3 órdenes con menos de 7 productos 
31. Mostrar los datos de los Shippers que nuca enviaron órdenes a la región oeste (Western) 
pero que si enviaron órdenes a la región este (Eastern)

*/
--22. Mostrar los nombres de los productos cuya cantidad de órdenes es mayor a 50 

SELECT od.ProductID, p.productname as NombreDelProducto, Count(od.Orderid)  as CantidadOrdenes
FROM  OrderDetails od JOIN  Products p  ON   p.ProductID  = od.ProductID
group by od.ProductID, p.productname 
HAVING CantidadOrdenes > 50
/* 
Msg 207, Level 16, State 1, Line 34
Invalid column name 'CantidadOrdenes'.
*/
SELECT od.ProductID, p.productname as NombreDelProducto, Count(od.Orderid)  as CantidadOrdenes
FROM  OrderDetails od JOIN  Products p  ON   p.ProductID  = od.ProductID
group by od.ProductID, p.productname 
HAVING Count(od.Orderid) > 50

/*
23. Mostrar los datos de los productos cuyo mayor descuento aplicado supera el 0.20 
*/
SELECT p.*
FROM Products p

SELECT p.productID, MAX(od.Discount)  as MayorDtoAplicado
FROM  OrderDetails od JOIN  Products p  ON   p.ProductID  = od.ProductID
group by p.productID
HAVING MAX(od.Discount) > 0.20  -- ( selec...   )

-- Introduccion al concepto de Subconsulta:
-- Una subconsulta es una Sentencia select encerrada entre parentesis
	( SELECT...FROM ... WHERE... )
/*Donde Puede ir Una Subconsulta:   En el SELECT
									 En el FROM 
									 En el WHERE 
									 En el HAVING
*/
*/
SELECT p1.*, Sub1.MayorDtoAplicado
FROM Products p1   
     JOIN

		( SELECT p.productID, MAX(od.Discount)  as MayorDtoAplicado
		FROM  OrderDetails od JOIN  Products p  ON   p.ProductID  = od.ProductID
		group by p.productID
		HAVING MAX(od.Discount) < 0.20  ) as Sub1

	ON  p1.ProductID  = Sub1.ProductID

/*
24. Mostrar nombre de cliente y contacto para todos los clientes 
que hicieron más de 8 pedidos en el
año 1998 
*/
SELECT  c.CompanyName as Cliente, c.ContactName as Contacto, Count(o.orderID) as CantidadDePedidos
FROM    Customers c Join Orders o  ON c.CustomerID = o.CustomerID
WHERE  YEAR(o.orderdate) = 1998 --año 1998   
GROUP BY c.CompanyName,c.ContactName
HAVING Count(o.orderID) > 8

/*25. Mostrar nombre de cliente, contacto y país para todos los clientes que tienen un promedio de
cantidad ordenada mayor a 30 en el segundo semestre de 1997 
*/
SELECT  c.CompanyName as Cliente, c.ContactName as Contacto, c.Country as Pais,
AVG(od.Quantity) as CantidadOrdenada
FROM    Customers c Join Orders o  ON c.CustomerID = o.CustomerID    
		JOIN OrderDetails od  ON o.OrderID = od.OrderID
WHERE  YEAR(o.orderdate) = 1997 --año 1998   
GROUP BY c.CompanyName,c.ContactName,c.Country
HAVING AVG(od.Quantity) > 30
Order By Pais

--26. Obtener todos los datos de los empleados que prepararon las órdenes en la fecha más reciente.
declare @FechaHoy date
set @FechaHoy = GETDATE()
print @FechaHoy


SELECT e.EmployeeID,MAX(o.orderdate) as FechaMasReciente
FROM Employees e  JOIN Orders o ON e.EmployeeID = o.EmployeeID
GROUP BY e.EmployeeID
Order BY FechaMasReciente DESC

--cONSULTA pRINCIPAL CON TODOS LOS DATOS DE LOS EMPLEADOS
SELECT e1.* , Sub1.FechaMasReciente
FROM Employees e1
--incorporo la Subconsulta
    JOIN
	(SELECT e.EmployeeID,MAX(o.orderdate) as FechaMasReciente
		FROM Employees e  JOIN Orders o ON e.EmployeeID = o.EmployeeID
		GROUP BY e.EmployeeID
		Order BY FechaMasReciente DESC  ) as Sub1
	ON e1.EmployeeID = Sub1.EmployeeID

/*  -- RESTRICCION de LAS SUBCONSULTAS --
Msg 1033, Level 15, State 1, Line 117
The ORDER BY clause is invalid in views, inline functions, derived tables, subqueries, and common table expressions, unless TOP, OFFSET or FOR XML is also specified.

Que NO ADMITE  ORDER BY
*/

--cONSULTA pRINCIPAL CON TODOS LOS DATOS DE LOS EMPLEADOS
SELECT e1.* , Sub1.FechaMasReciente
FROM Employees e1
--incorporo la Subconsulta
    JOIN
	(SELECT TOP 3 e.EmployeeID,MAX(o.orderdate) as FechaMasReciente
		FROM Employees e  JOIN Orders o ON e.EmployeeID = o.EmployeeID
		GROUP BY e.EmployeeID
		Order BY FechaMasReciente DESC  ) as Sub1
	ON e1.EmployeeID = Sub1.EmployeeID

-- otra variante

--cONSULTA pRINCIPAL CON TODOS LOS DATOS DE LOS EMPLEADOS
SELECT e1.* , Sub1.FechaMasReciente
FROM Employees e1
--incorporo la Subconsulta
    JOIN
	(SELECT e.EmployeeID,MAX(o.orderdate) as FechaMasReciente
		FROM Employees e  JOIN Orders o ON e.EmployeeID = o.EmployeeID
		GROUP BY e.EmployeeID
		) as Sub1
	ON e1.EmployeeID = Sub1.EmployeeID
Order BY FechaMasReciente DESC  




-- 27. Mostrar los datos de las categorías que no están en ninguna orden 

-- vARIAS OPCIONES PARA RESOLVERLOS
-- A)UN JOIN   (products,  orderdetails ) 
-- B) USAR NOT IN (algo)
-- C)  LEFT JOIN EXCLUDING

SELECT c.*
FROM Categories C

insert into Categories (CategoryName) VALUES ('Categoria N3C')
Update Categories SET Description = 'NuevaCategoria N3C' where CategoryID = 9


SELECT DISTINCT p.CategoryID 
FROM products p JOIN  orderdetails od ON p.ProductID = od.ProductID

-- NOT IN
SELECT  c.*
FROM Categories C  
WHERE c.CategoryID  NOT IN ( 
							SELECT DISTINCT p.CategoryID 
							FROM products p JOIN  orderdetails od 
											ON p.ProductID = od.ProductID
						   )
-- SUBCONSULTA en FROM

-- LEFT JOIN EXCLUDING
SELECT c.*
FROM Categories C  LEFT JOIN    (
							SELECT DISTINCT p.CategoryID 
							FROM products p JOIN  orderdetails od 
											ON p.ProductID = od.ProductID
						   ) as Tab1
ON  c.CategoryID  =  Tab1.CategoryID
WHERE Tab1.CategoryID  IS NULL



/*28. Mostrar el nombre de las empresas que tienen órdenes destino Brazil que tengan productos con
un promedio de descuento superior al promedio de los descuentos de todas las órdenes 
*/
--Mostrar el nombre de las empresas
--órdenes destino Brazil
--productos con un promedio de descuento   (Sub2)
--al promedio de los descuentos de todas las órdenes   (Sub3)

--Resolucion:
--Mostrar el nombre de las empresas 
Select c.Companyname as Empresa  
from Customers c  
--órdenes destino Brazil
   JOIN  Orders o ON c.CustomerID = o.CustomerID 
Where o.ShipCountry = 'Brazil'

--productos con un promedio de descuento :  Discount esta en OrderDetails

-- Sub2: 
(
	SELECT o1.CustomerID,od1.ProductID, AVG(od1.Discount) as PromDiscount
	FROM  Orders o1 JOIN OrderDetails od1 ON o1.orderid = od1.OrderID
	GROUP BY o1.CustomerID,od1.ProductID
	HAVING AVG(od1.Discount)  >   (Sub3)
)

--al promedio de los descuentos de todas las órdenes   (Sub3)
Sub3:
(
	SELECT AVG(od2.Discount) 
	FROM   OrderDetails od2  
)


-- Integrear Sub3 dentro de la Sub2
-- Sub2: 
(
	SELECT o1.CustomerID,od1.ProductID, AVG(od1.Discount) as PromDiscount
	FROM  Orders o1 JOIN OrderDetails od1 ON o1.orderid = od1.OrderID
	GROUP BY o1.CustomerID,od1.ProductID
	HAVING AVG(od1.Discount)  >   (
										SELECT AVG(od2.Discount) 
										FROM   OrderDetails od2  
								  )
)

--  El Desafio :  Conectar la COnsulta Principal con la Sub2 que creamos

--Mostrar el nombre de las empresas 
Select c.Companyname as Empresa  
from Customers c  
--órdenes destino Brazil
   JOIN  Orders o ON c.CustomerID = o.CustomerID 
Where o.ShipCountry = 'Brazil'
	AND c.CustomerID IN (sub1)

--:Sub1 para simplificar la SUb2 de tal manera que solo tenga las Empresas que cumplen con las Condiciones
--      deberia devolver solo el atributo del Customer ID
Sub1: 
(
	SELECT DISTINCT Tab2.CustomerID
	FROM  (
			SELECT o1.CustomerID,od1.ProductID, AVG(od1.Discount) as PromDiscount
			FROM  Orders o1 JOIN OrderDetails od1 ON o1.orderid = od1.OrderID
			GROUP BY o1.CustomerID,od1.ProductID
			HAVING AVG(od1.Discount)  >   (
												SELECT AVG(od2.Discount) 
												FROM   OrderDetails od2  
										  )
	      ) As Tab2
)
-- INTEGRAMOS LA SUB1 a la consulta Principal:

--Mostrar el nombre de las empresas 
Select DISTINCT c.Companyname as Empresa  
from Customers c  
--órdenes destino Brazil
   JOIN  Orders o ON c.CustomerID = o.CustomerID 
Where o.ShipCountry = 'Brazil'
	AND c.CustomerID IN (
							SELECT DISTINCT Tab2.CustomerID
							FROM  (
									SELECT o1.CustomerID,od1.ProductID, AVG(od1.Discount) as PromDiscount
									FROM  Orders o1 JOIN OrderDetails od1 ON o1.orderid = od1.OrderID
									GROUP BY o1.CustomerID,od1.ProductID
									HAVING AVG(od1.Discount)  >   (
																		SELECT AVG(od2.Discount) 
																		FROM   OrderDetails od2  
																  )
								  ) As Tab2
						)


select * from Customers
/*
29. Mostrar los nombres de todos los empleados, su cantidad de ordenes realizadas en los 
10 primeros días de julio de 1997 y la fecha de la última orden realizada en los primeros 10 días de julio
de 1997. En caso que el empleado no preparara ninguna orden en dicha fecha, igual deben mostrarse sus
datos 
*/
--Mostrar los nombres de todos los empleados
--su cantidad de ordenes realizadas en los 10 primeros días de julio de 1997  (Sub1)
--la fecha de la última orden realizada en los primeros 10 días de julio de 1997.
--En caso que el empleado no preparara ninguna orden en dicha fecha, 
--igual deben mostrarse sus datos   (LEFT JOIN)

-- La COnsulta PRINCIPAL:
SELECT e.EmployeeID,e.FirstName as Nombre, e.LastName as Apellido,
       sub1.CantOrdRealizadas, --sub1.CantOrdRealizadas
       sub1.fechaUltimaOrden
FROM Employees e  LEFT JOIN  (Sub1)

-- Sub1:
(
SELECT o.EmployeeID, COUNT(o.OrderID) as CantOrdRealizadas,
       MAX(o.OrderDate) as fechaUltimaOrden
FROM  ORDERS o
WHERE o.orderdate BETWEEN '01/07/1997' AND '10/07/1997'
GROUP BY o.EmployeeID
)

--INTEGRAMOS la SUB1 a la Consulta Principal

-- La COnsulta PRINCIPAL:
SELECT e.EmployeeID,e.FirstName as Nombre, e.LastName as Apellido,
       sub1.CantOrdRealizadas, --sub1.CantOrdRealizadas
       sub1.fechaUltimaOrden
FROM Employees e  LEFT JOIN  (
								SELECT o.EmployeeID, COUNT(o.OrderID) as CantOrdRealizadas,
									   MAX(o.OrderDate) as fechaUltimaOrden
								FROM  ORDERS o
								WHERE o.orderdate BETWEEN '01/07/1997' AND '10/07/1997'
								GROUP BY o.EmployeeID
							 )  as Sub1
				ON e.EmployeeID = Sub1.EmployeeID


