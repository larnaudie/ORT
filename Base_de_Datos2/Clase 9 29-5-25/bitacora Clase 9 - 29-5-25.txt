/* BITACORA CLASE 09 Grupo N3C 29/05/2025
==========================================
Temas: DIA: Practico Vistas
			Ejercicios de Transacciones
			Ejemplo de CURSOR (es)
==========================================
*/
USE nORTHWIND
SET DATEFORMAT DMY
/*
1) ej. vista  (4 puntos)   Examen de Mayo 2025


Implementar una vista que devuelva los datos de los clientes (Customers) 
que hayan ordenado todos los productos de la categoria 'Carne' en el
año actual. En la salida debe aparecer para cada uno de esos clientes 
la cantidad total de ordenes .
*/
Create View VtaEj1 as (
	select C.*, count(distinct O.OrderID) as cantTotOrdenes
	from Customers C, Orders O, OrderDetaills OD , Products P, Categories CT
	where C.customerID = O.customerID and O.OrderID = OD.OrderID 
	      and OD.ProductId = P.ProductID and P.CategoryId = CT.categoryID 
	      and CT.categoryName = 'Carne'
	group by O.CustomerID
	having count(distinct OD.ProductID) = (select count(*)
		                                   from Products P1, Categories CT1
										   where P1.CategoryId = CT1.categoryID 
										         and CT1.categoryName = 'Carne'
										   )
	)

-- TRANSACCIONES
-- BEGIN TRANSACTION  :  Inicia una transaccion
-- Cerrar una transaccion:   COMMIT //  ROLLBACK
--  Script
go

select * from ShippersTemp where Companyname2 LIKE 'PUNTACARGO%'
--
Delete from Shipperstemp where Companyname2 = 'PUNTACARGO'
--
go
BEGIN TRANSACTION
select * from ShippersTemp 
Delete from Shipperstemp where Companyname2 LIKE 'PUNTACARGO%'
select * from ShippersTemp 
COMMIT
ROLLBACK
select * from ShippersTemp 
go


-- ejemplo
USE NorthWind
BEGIN traN
 DECLARE @Error int--Declaramos una variable que utilizaremos para almacenar un posible
 --                  código de error
 BEGIN TRAN --Iniciamos la transacción
 UPDATE Products SET UnitPrice=18 WHERE ProductName ='Chai' --Ejecutamos la primera sentencia
 SET @Error= @@ERROR --Si ocurre un error almacenamos su código en @Error
                     --y saltamos al trozo de código que deshará la transacción. 
					 -- Si, eso de ahí es un 
					 --GOTO, el demonio de los programadores, pero no pasa nada por usarlo 
					 --     cuando es necesario
 IF (@Error<>0) GOTO TratarError --Si la primera sentencia se ejecuta con éxito, pasamos a la segunda
 else
	BEGIN
	UPDATE Products SET UnitPrice=19 WHERE ProductName='Chang'
	SET @Error=@@ERROR
	IF (@Error<>0) GOTO TratarError--Si llegamos hasta aquí es que los dos UPDATE se han completado con --éxito y podemos "guardar" la transacción en la base de datos
	else
		BEGIN
			COMMIT TRAN
		END;
	end
 
 TratarError:--Si ha ocurrido algún error llegamos hasta aquí

 If @@Error<>0 
	BEGIN
	PRINT 'Ha ocorrido un error. Abortamos la transacción'--Se lo comunicamos al usuario y deshacemos la transacción--todo volverá a estar como si nada hubiera ocurrido
	ROLLBACK TRAN
	END
ELSE 
	bEGIN
		ROLLBACK
	end
GO
-- fIN DEL sCRIPT

 sELECT * FROM pRODUCTS WHERE ProductName='Chang' OR ProductName='Chai'

 -- 10'  VOLVEMOS CON cUrsores
 /*
 Tema CURSORES
DECLARAR  LAS VARIABLES que se corresponderan con las columnas que devuelve el SELECT
DECLARAR el CURSOR y DEFINIRLO
*/
-- Iterar sobre las Filas de la  COnsulta que se van a procesar como un CURSOR

/* Consulta:
Queremos saber si el Producto Esta en el 20% o el 80% de los mas Vendidos  
Objetivo es 80% de los mas Vendidos
*/
SELECT row_number() OVER(ORDER BY Tab1.TotalVtasCliente DESC) AS Fila, Tab1.*
from (
		SELECT  o.customerId, 
				ROUND(SUM(od.quantity * od.unitprice * (1-od.discount) ),2)  as TotalVtasCliente,
			   ( SELECT ROUND(SUM(od1.quantity * od1.unitprice * (1-od1.discount) ),2)
				 FROM Orderdetails od1
			   ) as TOTALGRALVtas,
			   ( SELECT ROUND(SUM(od1.quantity * od1.unitprice * (1-od1.discount) ),2)
				 FROM Orderdetails od1
			   ) * 0.8 as VTAS80porc, 0.00 AS Integr80_20
		FROM Orders o JOIN Orderdetails od ON o.orderID = od.OrderID
		GROUP BY o.customerId
		--ORDER BY TotalVtasCliente DESC
		) aS tAB1

	--  AGREGAMOS EN LA tABLA DE CUSTOMER:  Paretto8020 int  null , Ranking int  null
go
	ALTER TABLE Customers ADD Paretto8020 int  null
	ALTER TABLE Customers ADD Ranking int  null
go
select * from Customers
-- 
--Declaracion del Cursor

Declare Mi_Cursor2  CURSOR FOR
	SELECT row_number() OVER(ORDER BY Tab1.TotalVtasCliente DESC) AS Fila, Tab1.*
	from (
		SELECT  o.customerId, 
				ROUND(SUM(od.quantity * od.unitprice * (1-od.discount) ),2)  as TotalVtasCliente,
			   ( SELECT ROUND(SUM(od1.quantity * od1.unitprice * (1-od1.discount) ),2)
				 FROM Orderdetails od1
			   ) as TOTALGRALVtas,
			   ( SELECT ROUND(SUM(od1.quantity * od1.unitprice * (1-od1.discount) ),2)
				 FROM Orderdetails od1
			   ) * 0.8 as VTAS80porc, 0 AS Integra80_20
		FROM Orders o JOIN Orderdetails od ON o.orderID = od.OrderID
		GROUP BY o.customerId
		--ORDER BY TotalVtasCliente DESC
		) aS tAB1
	FOR UPDATE
GO

-- Como Utilizamos el Cursor Iterando y tomando el control Fila a fila

-- Definir las variables de memoria que se van a utilizar para descargar 
-- en ellas los datos de las correspondientes columnas del Cursor.
DECLARE @fila int, 
		@cli nchar(5), 
		@TotVtaCli  decimal (12,2),
		@TotGral decimal (12,2),
		@Vta80porc decimal (12,2), 
		@i8020 int 

DECLARE @Acumulador decimal (12,2) 
--cargo las variables
set @Acumulador= 0.00
-- Abrir el Cursor
SET NOCOUNT ON  -- para que no muestre el mensaje de Cuantas filas se afectron
OPEN Mi_Cursor2 
-- Cargar la primer fila del Cursor
FETCH NEXT FROM Mi_Cursor2 INTO
		@fila, 
		@cli , 
		@TotVtaCli ,
		@TotGral ,
		@Vta80porc, 
		@i8020
WHILE  @@FETCH_STATUS = 0  -- se cargo una fila en las variables de memoria
	BEGIN
	-- Ejecutar el Bloque de codigo
	print 'Procesando cursor Fila: '+ convert(nchar(3), @fila) + ' Cliente: '+@cli
	--
	SET @Acumulador = @Acumulador + @TotVtaCli
	--
	IF @Acumulador <= @Vta80porc
		BEGIN  -- Esta entre los que conforman el 80% De las Ventas
		-- 
		UPDATE Customers SET Paretto8020 = 80,
		                     Ranking = @fila
			   where CustomerID = @cli
		-- Si quiero actualizar en el Cursor
		--UPDATE  Mi_Cursor2 SET @i8020 = 80  where @fila = @fila

		END
	ELSE 
		BEGIN -- Esta entre los que conforman el 20% De las Ventas
		UPDATE Customers SET Paretto8020 = 20,
		                     Ranking = @fila
			   where CustomerID = @cli
		END
	FETCH NEXT FROM Mi_Cursor2 INTO
		@fila, 
		@cli , 
		@TotVtaCli ,
		@TotGral ,
		@Vta80porc, 
		@i8020
    END
Close Mi_Cursor2

SELECT * from Customers WHERE Paretto8020 = 80 order by Ranking

DEALLOCATE Mi_Cursor2

/*
referencias a CURSORES:  
https://learn.microsoft.com/es-es/sql/t-sql/language-elements/declare-cursor-transact-sql?view=sql-server-ver16
*/
--  INICIO TEMA TRIGGERS (Teorico ppt: hasta Tablas INSERTED y DELETED